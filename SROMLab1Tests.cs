using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using NUnit;
using NUnit.Framework;
using SROMLab1;


namespace lab1
{
    public class Test
    {
        [TestFixture]
        public class TestCalculation
        {
            [Test]
            [TestCase("1", "1", "2")]
            [TestCase("A208F2341973A2F517D68741B2DE1DE8921BFC4EA0A1C4DA67FE894DAF976A86", "92BE89BBFCD3760ADF1071EAB7B159EC00C8D22A812B103FE8A24A7B1C922499", "134C77BF0164718FFF6E6F92C6A8F77D492E4CE7921CCD51A50A0D3C8CC298F1F")]
            [TestCase("C77E6EA7802A07E31653C4C0AF78F3CF46C47029E854EAD5B6710BFD1ED761DD", "530443350EDB89BF4809DF6E22FE8BF41D0E4E5212762AADA74F125A20996F9A", "11A82B1DC8F0591A25E5DA42ED2777FC363D2BE7BFACB15835DC01E573F70D177")]
            [TestCase("6E90A982977373DDC113D00578416811A541A7BF255C20CCDFFE10A0ED44E852874FBC1CE89D2051F6E976AFDBE808D9", "28E5296DBFDA46B352F0B55A94A893E5BAB7C3FFF244A189676E4A3A85F0385809EE736AD27FD4E09BA605EEEB16CA2C", "9775D2F0574DBA91140485600CE9FBF75FF96BBF17A0C256476C5ADB733520AA913E2F87BB1CF532928F7C9EC6FED305")]
            [TestCase("2", "2", "4")]
            [TestCase("5C353D8D758E06E4DFFB37B5",
                 "0",
                 "5C353D8D758E06E4DFFB37B5")]
            [TestCase("5C353D8D758E06E4DFFB37B5",
                 "1",
                 "5C353D8D758E06E4DFFB37B6")]
            [TestCase("671291C18CC4CEEA9F0878A9ED848F9A471AEFAF99C597B1062E7F5BE278E27444F0B6CD3951821905547367EB45B8C9",
                 "666A82C256DEBA9CA73BE9DFA4736678E37E8B7635C1A6BCF3A67ED7378C79F942A04CA8D8E3AD4D91C1B134641F6B65",
                 "CD7D1483E3A389874644628991F7F6132A997B25CF873E6DF9D4FE331A055C6D8791037612352F669716249C4F65242E")]
            public void AdditionTest(string hex1, string hex2, string expectedResult)
            {
                var a = Calculate.Converting(hex1);
                var b = Calculate.Converting(hex2);
                var actualResult = Calculate.ReConv(Calculate.LongAddInternal(a, b));
                Assert.AreEqual(expectedResult, actualResult);
            }           
        }


    }
}